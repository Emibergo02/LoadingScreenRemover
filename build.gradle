plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'dev.unnm3d'
version = '1.4'

repositories {
    mavenCentral()
    maven {
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        url = uri("https://repo.codemc.io/repository/maven-releases/")
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly "io.papermc.paper:paper-api:1.18-R0.1-SNAPSHOT"
    compileOnly "org.projectlombok:lombok:1.18.30"

    compileOnly "com.github.retrooper:packetevents-spigot:2.6.0"
    implementation 'com.github.Anon8281:UniversalScheduler:0.1.6'
    annotationProcessor "org.projectlombok:lombok:1.18.30"
}
shadowJar {
    dependencies{
        exclude(dependency('com.google.code.gson:gson:2.8.0'))
    }
    //relocate("com.github.retrooper.packetevents", "dev.unnm3d.loadingscreenremover.libraries.packetevents.api")
    //elocate("io.github.retrooper.packetevents", "dev.unnm3d.loadingscreenremover.libraries.packetevents.impl")
    relocate("net.kyori", "dev.unnm3d.loadingscreenremover.libraries.packetevents.kyori")
    relocate("com.github.Anon8281.universalScheduler", "dev.unnm3d.loadingscreenremover.libraries.universalScheduler")
    exclude 'assets/**'
}
def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
